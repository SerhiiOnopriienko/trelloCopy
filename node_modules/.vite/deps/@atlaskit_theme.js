import {
  _defineProperty,
  _objectWithoutPropertiesLoose
} from "./chunk-7L7MLQCN.js";
import {
  require_react
} from "./chunk-TQNJSUAI.js";
import {
  __export,
  __toESM
} from "./chunk-4EOJPDL2.js";

// ../node_modules/@atlaskit/theme/dist/esm/color-palettes.js
var color_palettes_exports = {};
__export(color_palettes_exports, {
  colorPalette: () => colorPalette,
  colorPalette16: () => colorPalette16,
  colorPalette24: () => colorPalette24,
  colorPalette8: () => colorPalette8
});

// ../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}

// ../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}

// ../node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}

// ../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}

// ../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// ../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

// ../node_modules/@atlaskit/theme/dist/esm/colors.js
var colors_exports = {};
__export(colors_exports, {
  B100: () => B100,
  B200: () => B200,
  B300: () => B300,
  B400: () => B400,
  B50: () => B50,
  B500: () => B500,
  B75: () => B75,
  DN0: () => DN0,
  DN10: () => DN10,
  DN100: () => DN100,
  DN100A: () => DN100A,
  DN10A: () => DN10A,
  DN20: () => DN20,
  DN200: () => DN200,
  DN200A: () => DN200A,
  DN20A: () => DN20A,
  DN30: () => DN30,
  DN300: () => DN300,
  DN300A: () => DN300A,
  DN30A: () => DN30A,
  DN40: () => DN40,
  DN400: () => DN400,
  DN400A: () => DN400A,
  DN40A: () => DN40A,
  DN50: () => DN50,
  DN500: () => DN500,
  DN500A: () => DN500A,
  DN50A: () => DN50A,
  DN60: () => DN60,
  DN600: () => DN600,
  DN600A: () => DN600A,
  DN60A: () => DN60A,
  DN70: () => DN70,
  DN700: () => DN700,
  DN700A: () => DN700A,
  DN70A: () => DN70A,
  DN80: () => DN80,
  DN800: () => DN800,
  DN800A: () => DN800A,
  DN80A: () => DN80A,
  DN90: () => DN90,
  DN900: () => DN900,
  DN90A: () => DN90A,
  G100: () => G100,
  G200: () => G200,
  G300: () => G300,
  G400: () => G400,
  G50: () => G50,
  G500: () => G500,
  G75: () => G75,
  N0: () => N0,
  N10: () => N10,
  N100: () => N100,
  N100A: () => N100A,
  N10A: () => N10A,
  N20: () => N20,
  N200: () => N200,
  N200A: () => N200A,
  N20A: () => N20A,
  N30: () => N30,
  N300: () => N300,
  N300A: () => N300A,
  N30A: () => N30A,
  N40: () => N40,
  N400: () => N400,
  N400A: () => N400A,
  N40A: () => N40A,
  N50: () => N50,
  N500: () => N500,
  N500A: () => N500A,
  N50A: () => N50A,
  N60: () => N60,
  N600: () => N600,
  N600A: () => N600A,
  N60A: () => N60A,
  N70: () => N70,
  N700: () => N700,
  N700A: () => N700A,
  N70A: () => N70A,
  N80: () => N80,
  N800: () => N800,
  N800A: () => N800A,
  N80A: () => N80A,
  N90: () => N90,
  N900: () => N900,
  N90A: () => N90A,
  P100: () => P100,
  P200: () => P200,
  P300: () => P300,
  P400: () => P400,
  P50: () => P50,
  P500: () => P500,
  P75: () => P75,
  R100: () => R100,
  R200: () => R200,
  R300: () => R300,
  R400: () => R400,
  R50: () => R50,
  R500: () => R500,
  R75: () => R75,
  T100: () => T100,
  T200: () => T200,
  T300: () => T300,
  T400: () => T400,
  T50: () => T50,
  T500: () => T500,
  T75: () => T75,
  Y100: () => Y100,
  Y200: () => Y200,
  Y300: () => Y300,
  Y400: () => Y400,
  Y50: () => Y50,
  Y500: () => Y500,
  Y75: () => Y75,
  background: () => background,
  backgroundActive: () => backgroundActive,
  backgroundHover: () => backgroundHover,
  backgroundOnLayer: () => backgroundOnLayer,
  blue: () => blue,
  codeBlock: () => codeBlock,
  green: () => green,
  heading: () => heading,
  link: () => link,
  linkActive: () => linkActive,
  linkHover: () => linkHover,
  linkOutline: () => linkOutline,
  placeholderText: () => placeholderText,
  primary: () => primary,
  purple: () => purple,
  red: () => red,
  skeleton: () => skeleton,
  subtleHeading: () => subtleHeading,
  subtleText: () => subtleText,
  teal: () => teal,
  text: () => text,
  textActive: () => textActive,
  textHover: () => textHover,
  yellow: () => yellow
});

// ../node_modules/@atlaskit/ds-lib/dist/esm/utils/warn-once.js
var printed = {};
function warnOnce(message) {
  if (printed[message]) {
    return;
  }
  printed[message] = true;
  if (typeof window !== "undefined") {
    console.warn(message);
  }
}

// ../node_modules/@atlaskit/ds-lib/dist/esm/utils/deprecation-warning.js
function deprecationWarning(packageName, api, additionalMessage) {
  warnOnce("[".concat(packageName, "]: The ").concat(api, " is deprecated.").concat(additionalMessage && " ".concat(additionalMessage)));
}

// ../node_modules/@atlaskit/theme/dist/esm/constants.js
var CHANNEL = "__ATLASKIT_THEME__";
var DEFAULT_THEME_MODE = "light";
var THEME_MODES = ["light", "dark"];
var borderRadius = function borderRadius2() {
  return 3;
};
var gridSize = function gridSize2() {
  return 8;
};
var fontSize = function fontSize2() {
  return 14;
};
var fontSizeSmall = function fontSizeSmall2() {
  return 11;
};
var fontFamily = function fontFamily2() {
  return "-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif";
};
var codeFontFamily = function codeFontFamily2() {
  return "'SFMono-Medium', 'SF Mono', 'Segoe UI Mono', 'Roboto Mono', 'Ubuntu Mono', Menlo, Consolas, Courier, monospace";
};
var focusRing = function focusRing2() {
  var color = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "var(--ds-border-focused, ".concat(B100, ")");
  var outlineWidth = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : gridSize() / 4;
  deprecationWarning("@atlaskit/theme", "focus ring mixin", "Please use `@atlaskit/focus-ring` instead.");
  return "\n  &:focus {\n    outline: none;\n    box-shadow: 0px 0px 0px ".concat(outlineWidth, "px ").concat(color, ";\n  }\n");
};
var noFocusRing = function noFocusRing2() {
  return "\n  box-shadow: none;\n";
};
var layers = {
  card: function card() {
    return 100;
  },
  navigation: function navigation() {
    return 200;
  },
  dialog: function dialog() {
    return 300;
  },
  layer: function layer() {
    return 400;
  },
  blanket: function blanket() {
    return 500;
  },
  modal: function modal() {
    return 510;
  },
  flag: function flag() {
    return 600;
  },
  spotlight: function spotlight() {
    return 700;
  },
  tooltip: function tooltip() {
    return 800;
  }
};
var visuallyHidden = function visuallyHidden2() {
  deprecationWarning("@atlaskit/theme", "visually hidden mixin", "Please use `@atlaskit/visually-hidden` instead.");
  return {
    border: "0 !important",
    clip: "rect(1px, 1px, 1px, 1px) !important",
    height: "1px !important",
    overflow: "hidden !important",
    padding: "0 !important",
    position: "absolute !important",
    width: "1px !important",
    whiteSpace: "nowrap !important"
  };
};
var assistive = visuallyHidden;
var skeletonShimmer = function skeletonShimmer2() {
  return {
    css: {
      backgroundColor: "var(--ds-skeleton, ".concat(skeleton(), ")"),
      animationDuration: "1.5s",
      animationIterationCount: "infinite",
      animationTimingFunction: "linear",
      animationDirection: "alternate"
    },
    keyframes: {
      from: {
        backgroundColor: "var(--ds-skeleton, ".concat(skeleton(), ")")
      },
      to: {
        backgroundColor: "var(--ds-skeleton-subtle, ".concat(N30A, ")")
      }
    }
  };
};

// ../node_modules/@atlaskit/theme/dist/esm/utils/get-theme.js
function getTheme(props) {
  if (props && props.theme) {
    if (CHANNEL in props.theme) {
      return props.theme[CHANNEL];
    } else if ("mode" in props.theme && THEME_MODES.includes(props.theme.mode)) {
      return props.theme;
    }
  }
  return {
    mode: DEFAULT_THEME_MODE
  };
}

// ../node_modules/@atlaskit/theme/dist/esm/utils/themed.js
function themedVariants(variantProp, variants) {
  return function(props) {
    var theme = getTheme(props);
    if (props && props[variantProp] && variants) {
      var modes = variants[props[variantProp]];
      if (modes && modes[theme.mode]) {
        var value = modes[theme.mode];
        if (value) {
          return value;
        }
      }
    }
    return "";
  };
}
function themed(modesOrVariant, variantModes) {
  if (typeof modesOrVariant === "string") {
    return themedVariants(modesOrVariant, variantModes);
  }
  var modes = modesOrVariant;
  return function(props) {
    var theme = getTheme(props);
    if (theme.mode in modes) {
      var value = modes[theme.mode];
      if (value) {
        return value;
      }
    }
    return "";
  };
}

// ../node_modules/@atlaskit/theme/dist/esm/colors.js
var R50 = "#FFEBE6";
var R75 = "#FFBDAD";
var R100 = "#FF8F73";
var R200 = "#FF7452";
var R300 = "#FF5630";
var R400 = "#DE350B";
var R500 = "#BF2600";
var Y50 = "#FFFAE6";
var Y75 = "#FFF0B3";
var Y100 = "#FFE380";
var Y200 = "#FFC400";
var Y300 = "#FFAB00";
var Y400 = "#FF991F";
var Y500 = "#FF8B00";
var G50 = "#E3FCEF";
var G75 = "#ABF5D1";
var G100 = "#79F2C0";
var G200 = "#57D9A3";
var G300 = "#36B37E";
var G400 = "#00875A";
var G500 = "#006644";
var B50 = "#DEEBFF";
var B75 = "#B3D4FF";
var B100 = "#4C9AFF";
var B200 = "#2684FF";
var B300 = "#0065FF";
var B400 = "#0052CC";
var B500 = "#0747A6";
var P50 = "#EAE6FF";
var P75 = "#C0B6F2";
var P100 = "#998DD9";
var P200 = "#8777D9";
var P300 = "#6554C0";
var P400 = "#5243AA";
var P500 = "#403294";
var T50 = "#E6FCFF";
var T75 = "#B3F5FF";
var T100 = "#79E2F2";
var T200 = "#00C7E6";
var T300 = "#00B8D9";
var T400 = "#00A3BF";
var T500 = "#008DA6";
var N0 = "#FFFFFF";
var N10 = "#FAFBFC";
var N20 = "#F4F5F7";
var N30 = "#EBECF0";
var N40 = "#DFE1E6";
var N50 = "#C1C7D0";
var N60 = "#B3BAC5";
var N70 = "#A5ADBA";
var N80 = "#97A0AF";
var N90 = "#8993A4";
var N100 = "#7A869A";
var N200 = "#6B778C";
var N300 = "#5E6C84";
var N400 = "#505F79";
var N500 = "#42526E";
var N600 = "#344563";
var N700 = "#253858";
var N800 = "#172B4D";
var N900 = "#091E42";
var N10A = "rgba(9, 30, 66, 0.02)";
var N20A = "rgba(9, 30, 66, 0.04)";
var N30A = "rgba(9, 30, 66, 0.08)";
var N40A = "rgba(9, 30, 66, 0.13)";
var N50A = "rgba(9, 30, 66, 0.25)";
var N60A = "rgba(9, 30, 66, 0.31)";
var N70A = "rgba(9, 30, 66, 0.36)";
var N80A = "rgba(9, 30, 66, 0.42)";
var N90A = "rgba(9, 30, 66, 0.48)";
var N100A = "rgba(9, 30, 66, 0.54)";
var N200A = "rgba(9, 30, 66, 0.60)";
var N300A = "rgba(9, 30, 66, 0.66)";
var N400A = "rgba(9, 30, 66, 0.71)";
var N500A = "rgba(9, 30, 66, 0.77)";
var N600A = "rgba(9, 30, 66, 0.82)";
var N700A = "rgba(9, 30, 66, 0.89)";
var N800A = "rgba(9, 30, 66, 0.95)";
var DN900 = "#E6EDFA";
var DN800 = "#DCE5F5";
var DN700 = "#CED9EB";
var DN600 = "#B8C7E0";
var DN500 = "#ABBBD6";
var DN400 = "#9FB0CC";
var DN300 = "#8C9CB8";
var DN200 = "#7988A3";
var DN100 = "#67758F";
var DN90 = "#56637A";
var DN80 = "#455166";
var DN70 = "#3B475C";
var DN60 = "#313D52";
var DN50 = "#283447";
var DN40 = "#202B3D";
var DN30 = "#1B2638";
var DN20 = "#121A29";
var DN10 = "#0E1624";
var DN0 = "#0D1424";
var DN800A = "rgba(13, 20, 36, 0.06)";
var DN700A = "rgba(13, 20, 36, 0.14)";
var DN600A = "rgba(13, 20, 36, 0.18)";
var DN500A = "rgba(13, 20, 36, 0.29)";
var DN400A = "rgba(13, 20, 36, 0.36)";
var DN300A = "rgba(13, 20, 36, 0.40)";
var DN200A = "rgba(13, 20, 36, 0.47)";
var DN100A = "rgba(13, 20, 36, 0.53)";
var DN90A = "rgba(13, 20, 36, 0.63)";
var DN80A = "rgba(13, 20, 36, 0.73)";
var DN70A = "rgba(13, 20, 36, 0.78)";
var DN60A = "rgba(13, 20, 36, 0.81)";
var DN50A = "rgba(13, 20, 36, 0.85)";
var DN40A = "rgba(13, 20, 36, 0.89)";
var DN30A = "rgba(13, 20, 36, 0.92)";
var DN20A = "rgba(13, 20, 36, 0.95)";
var DN10A = "rgba(13, 20, 36, 0.97)";
var background = themed({
  light: "var(--ds-surface, ".concat(N0, ")"),
  dark: "var(--ds-surface, ".concat(DN30, ")")
});
var backgroundActive = themed({
  light: "var(--ds-background-selected, ".concat(B50, ")"),
  dark: "var(--ds-background-selected, ".concat(B75, ")")
});
var backgroundHover = themed({
  light: "var(--ds-background-neutral-hovered, ".concat(N30, ")"),
  dark: "var(--ds-background-neutral-hovered, ".concat(DN70, ")")
});
var backgroundOnLayer = themed({
  light: "var(--ds-surface-overlay, ".concat(N0, ")"),
  dark: "var(--ds-surface-overlay, ".concat(DN50, ")")
});
var text = themed({
  light: "var(--ds-text, ".concat(N900, ")"),
  dark: "var(--ds-text, ".concat(DN600, ")")
});
var textHover = themed({
  light: "var(--ds-text, ".concat(N800, ")"),
  dark: "var(--ds-text, ".concat(DN600, ")")
});
var textActive = themed({
  light: "var(--ds-text-selected, ".concat(B400, ")"),
  dark: "var(--ds-text-selected, ".concat(B400, ")")
});
var subtleText = themed({
  light: "var(--ds-text-subtlest, ".concat(N200, ")"),
  dark: "var(--ds-text-subtlest, ".concat(DN300, ")")
});
var placeholderText = themed({
  light: "var(--ds-text-subtlest, ".concat(N100, ")"),
  dark: "var(--ds-text-subtlest, ".concat(DN200, ")")
});
var heading = themed({
  light: "var(--ds-text, ".concat(N800, ")"),
  dark: "var(--ds-text, ".concat(DN600, ")")
});
var subtleHeading = themed({
  light: "var(--ds-text-subtlest, ".concat(N200, ")"),
  dark: "var(--ds-text-subtlest, ".concat(DN300, ")")
});
var codeBlock = themed({
  light: N20,
  dark: DN50
});
var link = themed({
  light: "var(--ds-link, ".concat(B400, ")"),
  dark: "var(--ds-link, ".concat(B100, ")")
});
var linkHover = themed({
  light: "var(--ds-link-pressed, ".concat(B300, ")"),
  dark: "var(--ds-link-pressed, ".concat(B200, ")")
});
var linkActive = themed({
  light: "var(--ds-link-pressed, ".concat(B500, ")"),
  dark: "var(--ds-link-pressed, ".concat(B100, ")")
});
var linkOutline = themed({
  light: "var(--ds-border-focused, ".concat(B100, ")"),
  dark: "var(--ds-border-focused, ".concat(B200, ")")
});
var primary = themed({
  light: "var(--ds-background-brand-bold, ".concat(B400, ")"),
  dark: "var(--ds-background-brand-bold, ".concat(B100, ")")
});
var blue = themed({
  light: B400,
  dark: B100
});
var teal = themed({
  light: T300,
  dark: T200
});
var purple = themed({
  light: P300,
  dark: P100
});
var red = themed({
  light: R300,
  dark: R300
});
var yellow = themed({
  light: Y300,
  dark: Y300
});
var green = themed({
  light: G300,
  dark: G300
});
var skeleton = function skeleton2() {
  return "var(--ds-skeleton, ".concat(N20A, ")");
};

// ../node_modules/@atlaskit/theme/dist/esm/color-palettes.js
var colorPalette8 = [{
  background: N800,
  text: N0
}, {
  background: R400,
  text: N0
}, {
  background: P400,
  text: P50
}, {
  background: B400,
  text: B75
}, {
  background: T300,
  text: N800
}, {
  background: G400,
  text: N0
}, {
  background: Y400,
  text: N800
}, {
  background: N70,
  text: N800
}];
var colorPalette16 = [].concat(colorPalette8, [{
  background: N500,
  text: N0
}, {
  background: R100,
  text: N800
}, {
  background: P75,
  text: N800
}, {
  background: B100,
  text: N800
}, {
  background: T100,
  text: N800
}, {
  background: G100,
  text: G500
}, {
  background: Y200,
  text: N800
}, {
  background: N0,
  text: N800
}]);
var colorPalette24 = [].concat(_toConsumableArray(colorPalette16), [{
  background: N100,
  text: N0
}, {
  background: N40,
  text: N800
}, {
  background: N50,
  text: R500
}, {
  background: P50,
  text: P500
}, {
  background: B50,
  text: B500
}, {
  background: T75,
  text: N800
}, {
  background: G50,
  text: G500
}, {
  background: Y75,
  text: N800
}]);
var colorPalette = function colorPalette2() {
  var palette = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "8";
  switch (palette) {
    case "8":
      return colorPalette8;
    case "16":
      return colorPalette16;
    case "24":
      return colorPalette24;
    default:
      throw new Error("The only available color palette is 8, 16, 24");
  }
};

// ../node_modules/@atlaskit/theme/dist/esm/components/atlaskit-theme-provider.js
var import_react3 = __toESM(require_react());

// ../node_modules/@atlaskit/theme/dist/esm/components/hooks/use-theme-reset-styles.js
var import_react = __toESM(require_react());
var SELECTOR = "old-ds-theme-mode";
var baseResetStyles = [{
  mode: "light"
}, {
  mode: "dark"
}].map(function(theme) {
  return "\n  .".concat(theme.mode, "-").concat(SELECTOR, " {\n    color: ").concat(text({
    theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " a {\n    color: ").concat(link({
    theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " a:hover {\n    color: ").concat(linkHover({
    theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " a:active {\n    color: ").concat(linkActive({
    theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " a:focus {\n    outlineColor: ").concat(linkOutline({
    theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " h1,\n  .").concat(theme.mode, "-").concat(SELECTOR, " h2,\n  .").concat(theme.mode, "-").concat(SELECTOR, " h3,\n  .").concat(theme.mode, "-").concat(SELECTOR, " h4,\n  .").concat(theme.mode, "-").concat(SELECTOR, " h5 {\n    color: ").concat(heading({
    theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " h6 {\n    color: ").concat(subtleHeading({
    theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " small {\n    color: ").concat(subtleText({
    theme
  }), ";\n  }");
}).join("\n");
var getStylesheetResetCSS = function getStylesheetResetCSS2(backgroundColor) {
  return "body { background: ".concat(backgroundColor, "; }");
};
var UNIQUE_INTERNAL_ID = "ds--theme--ak-theme-provider";
var UNIQUE_BODY_BG_ID = "ds--theme--ak-body-background";
var useThemeResetStyles = function useThemeResetStyles2(backgroundColor) {
  var stylesheet = (0, import_react.useRef)(null);
  var bgColorNode = (0, import_react.useRef)(null);
  (0, import_react.useEffect)(function() {
    var hasNode = document.getElementById(UNIQUE_INTERNAL_ID);
    if (hasNode) {
      return;
    }
    stylesheet.current = document.createElement("style");
    if (document && document.head) {
      stylesheet.current.id = UNIQUE_INTERNAL_ID;
      document.head.prepend(stylesheet.current);
      stylesheet.current.innerHTML = baseResetStyles;
      return function() {
        if (stylesheet.current && document && document.head) {
          document.head.removeChild(stylesheet.current);
          stylesheet.current = null;
        }
      };
    }
  }, []);
  (0, import_react.useEffect)(function() {
    var hasBodyNode = document.getElementById(UNIQUE_BODY_BG_ID);
    if (document && document.head) {
      if (!hasBodyNode) {
        bgColorNode.current = document.createElement("style");
        bgColorNode.current.id = UNIQUE_BODY_BG_ID;
        document.head.append(bgColorNode.current);
      }
      if (bgColorNode.current) {
        var cssBgColor = getStylesheetResetCSS(backgroundColor);
        bgColorNode.current.innerHTML = cssBgColor;
      }
      return function() {
        if (bgColorNode.current && document && document.head) {
          document.head.removeChild(bgColorNode.current);
          bgColorNode.current = null;
        }
      };
    }
  }, [backgroundColor]);
};
var use_theme_reset_styles_default = useThemeResetStyles;

// ../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}

// ../node_modules/@atlaskit/theme/dist/esm/utils/create-theme.js
var import_react2 = __toESM(require_react());
var _excluded = ["children"];
function createTheme(defaultGetTokens) {
  var emptyThemeFn = function emptyThemeFn2(getTokens, props) {
    return getTokens(props);
  };
  var ThemeContext = (0, import_react2.createContext)(defaultGetTokens);
  function useTheme2(themeProps) {
    var theme = (0, import_react2.useContext)(ThemeContext);
    var themeFn = theme || emptyThemeFn;
    var tokens = themeFn(themeProps);
    return tokens;
  }
  function Consumer2(props) {
    var children = props.children, themeProps = _objectWithoutProperties(props, _excluded);
    var tokens = useTheme2(themeProps);
    return import_react2.default.createElement(import_react2.default.Fragment, null, children(tokens));
  }
  function Provider2(props) {
    var themeFn = (0, import_react2.useContext)(ThemeContext);
    var valueFn = props.value || emptyThemeFn;
    var mixedFn = (0, import_react2.useCallback)(function(themeProps) {
      return valueFn(themeFn, themeProps);
    }, [themeFn, valueFn]);
    return import_react2.default.createElement(ThemeContext.Provider, {
      value: mixedFn
    }, props.children);
  }
  return {
    Consumer: Consumer2,
    Provider: Provider2,
    useTheme: useTheme2
  };
}

// ../node_modules/@atlaskit/theme/dist/esm/components/theme.js
var _createTheme = createTheme(function() {
  return {
    mode: "light"
  };
});
var Provider = _createTheme.Provider;
var Consumer = _createTheme.Consumer;
var useTheme = _createTheme.useTheme;
var theme_default = {
  Provider,
  Consumer
};

// ../node_modules/@atlaskit/theme/dist/esm/components/atlaskit-theme-provider.js
var themeFnMap = {
  dark: function dark() {
    return {
      mode: "dark"
    };
  },
  light: function light() {
    return {
      mode: "light"
    };
  }
};
var AtlaskitThemeProvider = (0, import_react3.memo)(function(_ref) {
  var _ref$mode = _ref.mode, mode = _ref$mode === void 0 ? DEFAULT_THEME_MODE : _ref$mode, _ref$background = _ref.background, background2 = _ref$background === void 0 ? background : _ref$background, children = _ref.children;
  var themeObj = {
    theme: {
      mode
    }
  };
  var backgroundColor = background2(themeObj);
  use_theme_reset_styles_default(backgroundColor);
  return import_react3.default.createElement(theme_default.Provider, {
    value: themeFnMap[mode]
  }, import_react3.default.createElement("div", {
    className: "".concat(mode, "-").concat(SELECTOR),
    style: {
      backgroundColor
    }
  }, children));
});
var atlaskit_theme_provider_default = AtlaskitThemeProvider;

// ../node_modules/@atlaskit/theme/dist/esm/elevation.js
var elevation_exports = {};
__export(elevation_exports, {
  e100: () => e100,
  e200: () => e200,
  e300: () => e300,
  e400: () => e400,
  e500: () => e500
});
var e100 = themed({
  light: "box-shadow: ".concat("var(--ds-shadow-raised, ".concat("0 1px 1px ".concat(N50A, ", 0 0 1px 1px ").concat(N40A), ")"), ";"),
  dark: "box-shadow: ".concat("var(--ds-shadow-raised, ".concat("0 1px 1px ".concat(DN50A, ", 0 0 1px 1px ").concat(DN40A), ")"), ";")
});
var e200 = themed({
  light: "box-shadow: ".concat("var(--ds-shadow-overlay, ".concat("0 4px 8px -2px ".concat(N50A, ", 0 0 1px ").concat(N60A), ")"), ";"),
  dark: "box-shadow: ".concat("var(--ds-shadow-overlay, ".concat("0 4px 8px -2px ".concat(DN50A, ", 0 0 1px ").concat(DN60A), ")"), ";")
});
var e300 = themed({
  light: "box-shadow: ".concat("var(--ds-shadow-overlay, ".concat("0 8px 16px -4px ".concat(N50A, ", 0 0 1px ").concat(N60A), ")"), ";"),
  dark: "box-shadow: ".concat("var(--ds-shadow-overlay, ".concat("0 8px 16px -4px ".concat(DN50A, ", 0 0 1px ").concat(DN60A), ")"), ";")
});
var e400 = themed({
  light: "box-shadow: ".concat("var(--ds-shadow-overlay, ".concat("0 12px 24px -6px ".concat(N50A, ", 0 0 1px ").concat(N60A), ")"), ";"),
  dark: "box-shadow: ".concat("var(--ds-shadow-overlay, ".concat("0 12px 24px -6px ".concat(DN50A, ", 0 0 1px ").concat(DN60A), ")"), ";")
});
var e500 = themed({
  light: "box-shadow: ".concat("var(--ds-shadow-overlay, ".concat("0 20px 32px -8px ".concat(N50A, ", 0 0 1px ").concat(N60A), ")"), ";"),
  dark: "box-shadow: ".concat("var(--ds-shadow-overlay, ".concat("0 20px 32px -8px ".concat(DN50A, ", 0 0 1px ").concat(DN60A), ")"), ";")
});

// ../node_modules/@atlaskit/theme/dist/esm/typography.js
var typography_exports = {};
__export(typography_exports, {
  h100: () => h100,
  h200: () => h200,
  h300: () => h300,
  h400: () => h400,
  h500: () => h500,
  h600: () => h600,
  h700: () => h700,
  h800: () => h800,
  h900: () => h900,
  headingSizes: () => headingSizes
});
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var baseHeading = function baseHeading2(size, lineHeight) {
  return {
    fontSize: "".concat(size / fontSize(), "em"),
    fontStyle: "inherit",
    lineHeight: lineHeight / size
  };
};
var headingSizes = {
  h900: {
    size: 35,
    lineHeight: 40
  },
  h800: {
    size: 29,
    lineHeight: 32
  },
  h700: {
    size: 24,
    lineHeight: 28
  },
  h600: {
    size: 20,
    lineHeight: 24
  },
  h500: {
    size: 16,
    lineHeight: 20
  },
  h400: {
    size: 14,
    lineHeight: 16
  },
  h300: {
    size: 12,
    lineHeight: 16
  },
  h200: {
    size: 12,
    lineHeight: 16
  },
  h100: {
    size: 11,
    lineHeight: 16
  }
};
var h900 = function h9002() {
  var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return _objectSpread(_objectSpread({}, baseHeading(headingSizes.h900.size, headingSizes.h900.lineHeight)), {}, {
    color: "var(--ds-text, ".concat(heading(props), ")"),
    fontWeight: "var(--ds-font-weight-medium, 500)",
    letterSpacing: "-0.01em",
    marginTop: "".concat(gridSize() * 6.5, "px")
  });
};
var h800 = function h8002() {
  var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return _objectSpread(_objectSpread({}, baseHeading(headingSizes.h800.size, headingSizes.h800.lineHeight)), {}, {
    color: "var(--ds-text, ".concat(heading(props), ")"),
    fontWeight: "var(--ds-font-weight-semibold, 600)",
    letterSpacing: "-0.01em",
    marginTop: "".concat(gridSize() * 5, "px")
  });
};
var h700 = function h7002() {
  var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return _objectSpread(_objectSpread({}, baseHeading(headingSizes.h700.size, headingSizes.h700.lineHeight)), {}, {
    color: "var(--ds-text, ".concat(heading(props), ")"),
    fontWeight: "var(--ds-font-weight-medium, 500)",
    letterSpacing: "-0.01em",
    marginTop: "".concat(gridSize() * 5, "px")
  });
};
var h600 = function h6002() {
  var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return _objectSpread(_objectSpread({}, baseHeading(headingSizes.h600.size, headingSizes.h600.lineHeight)), {}, {
    color: "var(--ds-text, ".concat(heading(props), ")"),
    fontWeight: "var(--ds-font-weight-medium, 500)",
    letterSpacing: "-0.008em",
    marginTop: "".concat(gridSize() * 3.5, "px")
  });
};
var h500 = function h5002() {
  var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return _objectSpread(_objectSpread({}, baseHeading(headingSizes.h500.size, headingSizes.h500.lineHeight)), {}, {
    color: "var(--ds-text, ".concat(heading(props), ")"),
    fontWeight: "var(--ds-font-weight-semibold, 600)",
    letterSpacing: "-0.006em",
    marginTop: "".concat(gridSize() * 3, "px")
  });
};
var h400 = function h4002() {
  var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return _objectSpread(_objectSpread({}, baseHeading(headingSizes.h400.size, headingSizes.h400.lineHeight)), {}, {
    color: "var(--ds-text, ".concat(heading(props), ")"),
    fontWeight: "var(--ds-font-weight-semibold, 600)",
    letterSpacing: "-0.003em",
    marginTop: "".concat(gridSize() * 2, "px")
  });
};
var h300 = function h3002() {
  var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return _objectSpread(_objectSpread({}, baseHeading(headingSizes.h300.size, headingSizes.h300.lineHeight)), {}, {
    color: "var(--ds-text, ".concat(heading(props), ")"),
    fontWeight: "var(--ds-font-weight-semibold, 600)",
    marginTop: "".concat(gridSize() * 2.5, "px"),
    textTransform: "uppercase"
  });
};
var h200 = function h2002() {
  var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return _objectSpread(_objectSpread({}, baseHeading(headingSizes.h200.size, headingSizes.h200.lineHeight)), {}, {
    color: "var(--ds-text-subtlest, ".concat(subtleHeading(props), ")"),
    fontWeight: "var(--ds-font-weight-semibold, 600)",
    marginTop: "".concat(gridSize() * 2, "px")
  });
};
var h100 = function h1002() {
  var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return _objectSpread(_objectSpread({}, baseHeading(headingSizes.h100.size, headingSizes.h100.lineHeight)), {}, {
    color: "var(--ds-text-subtlest, ".concat(subtleHeading(props), ")"),
    fontWeight: "var(--ds-font-weight-bold, 700)",
    marginTop: "".concat(gridSize() * 2, "px")
  });
};
export {
  atlaskit_theme_provider_default as AtlaskitThemeProvider,
  CHANNEL,
  DEFAULT_THEME_MODE,
  THEME_MODES,
  assistive,
  borderRadius,
  codeFontFamily,
  color_palettes_exports as colorPalettes,
  colors_exports as colors,
  createTheme,
  theme_default as default,
  elevation_exports as elevation,
  focusRing,
  fontFamily,
  fontSize,
  fontSizeSmall,
  getTheme,
  gridSize,
  layers,
  noFocusRing,
  skeletonShimmer,
  themed,
  typography_exports as typography,
  useTheme as useGlobalTheme,
  visuallyHidden
};
//# sourceMappingURL=@atlaskit_theme.js.map
